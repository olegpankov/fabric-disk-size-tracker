version: '3.6'

networks:
  default:
    name: fabric-network

volumes:
  ca.org1.example.com:
    name: ca.org1.example.com
  peer0.org1.example.com:
    name: peer0.org1.example.com
  peer1.org1.example.com:
    name: peer1.org1.example.com
  peer2.org1.example.com:
    name: peer2.org1.example.com
  ca.org2.example.com:
    name: ca.org2.example.com
  peer0.org2.example.com:
    name: peer0.org2.example.com
  peer1.org2.example.com:
    name: peer1.org2.example.com
  peer2.org2.example.com:
    name: peer2.org2.example.com
  orderer.example.com:
    name: orderer.example.com

services:
  ca.org1.example.com:
    build: ./docker-files/ca.org1.example.com
    image: ca.org1.example.com
    container_name: ca.org1.example.com
    restart: always
    logging:
      options:
        max-size: 50m
    environment:
    - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
    - FABRIC_CA_SERVER_CA_NAME=ca.org1.example.com
    - FABRIC_CA_SERVER_TLS_KEYFILE=/certificate/key.pem
    - FABRIC_CA_SERVER_TLS_ENABLED=true
    - FABRIC_CA_SERVER_TLS_CERTFILE=/certificate/cert.pem
    volumes:
    - ca.org1.example.com:/etc/hyperledger/fabric-ca-server
    ports:
    - 7054:7054
    command: sh -c 'fabric-ca-server start --ca.certfile /certificate/cert.pem --ca.keyfile /certificate/key.pem -b admin:adminpw -d'

  ca.org2.example.com:
    build: ./docker-files/ca.org2.example.com
    image: ca.org2.example.com
    container_name: ca.org2.example.com
    restart: always
    logging:
      options:
        max-size: 50m
    environment:
    - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
    - FABRIC_CA_SERVER_CA_NAME=ca.org2.example.com
    - FABRIC_CA_SERVER_TLS_KEYFILE=/certificate/key.pem
    - FABRIC_CA_SERVER_TLS_ENABLED=true
    - FABRIC_CA_SERVER_TLS_CERTFILE=/certificate/cert.pem
    volumes:
    - ca.org2.example.com:/etc/hyperledger/fabric-ca-server
    ports:
    - 7154:7054
    command: sh -c 'fabric-ca-server start --ca.certfile /certificate/cert.pem --ca.keyfile /certificate/key.pem -b admin:adminpw -d'

  orderer.example.com:
    build: ./docker-files/orderer.example.com
    image: orderer.example.com
    container_name: orderer.example.com
    restart: always
    environment:
    - ORDERER_GENERAL_LOGLEVEL=debug
    - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
    - ORDERER_GENERAL_GENESISMETHOD=file
    - ORDERER_GENERAL_GENESISFILE=/orderer/genesis.block
    - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
    - ORDERER_GENERAL_LOCALMSPDIR=/orderer/msp
    - ORDERER_GENERAL_TLS_ENABLED=true
    - ORDERER_GENERAL_TLS_PRIVATEKEY=/orderer/tls/server.key
    - ORDERER_GENERAL_TLS_CERTIFICATE=/orderer/tls/server.crt
    - ORDERER_GENERAL_TLS_ROOTCAS=[/orderer/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    ports:
    - 7050:7050
    logging:
      options:
        max-size: 50m
    command: orderer
    volumes:
    - orderer.example.com:/var/hyperledger/production

  peer0.org1.example.com:
    build: ./docker-files/peer0.org1.example.com
    image: peer0.org1.example.com
    container_name: peer0.org1.example.com
    restart: always
    environment:
    - CORE_LOGGING_LEVEL=debug
    - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
    - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
    - CORE_PEER_ID=peer0.org1.example.com
    - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
    - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric-network
    - CORE_PEER_LOCALMSPID=Org1MSP
    - CORE_PEER_MSPCONFIGPATH=/peer/peer0.org1.example.com/msp
    - CORE_PEER_PROFILE_ENABLED=true
    - CORE_PEER_TLS_ENABLED=true
    - CORE_PEER_TLS_CERT_FILE=/peer/tls/server.crt
    - CORE_PEER_TLS_KEY_FILE=/peer/tls/server.key
    - CORE_PEER_TLS_ROOTCERT_FILE=/peer/tls/ca.crt
    - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
    - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0:5984
    # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
    # provide the credentials for ledger to connect to CouchDB.  The username and password must
    # match the username and password set for the associated CouchDB.
    - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
    - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
    - 7051:7051
    - 7053:7053
    logging:
      options:
        max-size: 50m
    volumes:
    - /var/run:/host/var/run
    - peer0.org1.example.com:/var/hyperledger/production
    - ./chaincode:/chaincode
    depends_on:
    - orderer.example.com
    - couchdb0

  couchdb0:
    container_name: couchdb0
    image: hyperledger/fabric-couchdb
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=
      - COUCHDB_PASSWORD=
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    ports:
      - "5984:5984"

  peer1.org1.example.com:
    build: ./docker-files/peer1.org1.example.com
    image: peer1.org1.example.com
    container_name: peer1.org1.example.com
    restart: always
    environment:
    - CORE_LOGGING_LEVEL=debug
    - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
    - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
    - CORE_PEER_ID=peer1.org1.example.com
    - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
    - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric-network
    - CORE_PEER_LOCALMSPID=Org1MSP
    - CORE_PEER_MSPCONFIGPATH=/peer/peer1.org1.example.com/msp
    - CORE_PEER_TLS_ENABLED=true
    - CORE_PEER_TLS_CERT_FILE=/peer/tls/server.crt
    - CORE_PEER_TLS_KEY_FILE=/peer/tls/server.key
    - CORE_PEER_TLS_ROOTCERT_FILE=/peer/tls/ca.crt
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
    - 8051:7051
    - 8053:7053
    logging:
      options:
        max-size: 50m
    volumes:
    - /var/run:/host/var/run
    - peer1.org1.example.com:/var/hyperledger/production
    - ./chaincode:/chaincode
    depends_on:
    - orderer.example.com

  peer2.org1.example.com:
    build: ./docker-files/peer2.org1.example.com
    image: peer2.org1.example.com
    container_name: peer2.org1.example.com
    restart: always
    environment:
    - CORE_LOGGING_LEVEL=debug
    - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
    - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
    - CORE_PEER_ID=peer2.org1.example.com
    - CORE_PEER_ADDRESS=peer2.org1.example.com:7051
    - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric-network
    - CORE_PEER_LOCALMSPID=Org1MSP
    - CORE_PEER_MSPCONFIGPATH=/peer/peer2.org1.example.com/msp
    - CORE_PEER_TLS_ENABLED=true
    - CORE_PEER_TLS_CERT_FILE=/peer/tls/server.crt
    - CORE_PEER_TLS_KEY_FILE=/peer/tls/server.key
    - CORE_PEER_TLS_ROOTCERT_FILE=/peer/tls/ca.crt
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
    - 9051:7051
    - 9053:7053
    logging:
      options:
        max-size: 50m
    volumes:
    - /var/run:/host/var/run
    - peer2.org1.example.com:/var/hyperledger/production
    - ./chaincode:/chaincode
    depends_on:
    - orderer.example.com

  peer0.org2.example.com:
    build: ./docker-files/peer0.org2.example.com
    image: peer0.org2.example.com
    container_name: peer0.org2.example.com
    restart: always
    environment:
    - CORE_LOGGING_LEVEL=debug
    - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
    - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
    - CORE_PEER_ID=peer0.org2.example.com
    - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
    - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric-network
    - CORE_PEER_LOCALMSPID=Org2MSP
    - CORE_PEER_MSPCONFIGPATH=/peer/peer0.org2.example.com/msp
    - CORE_PEER_TLS_ENABLED=true
    - CORE_PEER_TLS_CERT_FILE=/peer/tls/server.crt
    - CORE_PEER_TLS_KEY_FILE=/peer/tls/server.key
    - CORE_PEER_TLS_ROOTCERT_FILE=/peer/tls/ca.crt
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
    - 7151:7051
    - 7153:7053
    logging:
      options:
        max-size: 50m
    volumes:
    - /var/run:/host/var/run
    - peer0.org2.example.com:/var/hyperledger/production
    - ./chaincode:/chaincode
    depends_on:
    - orderer.example.com

  peer1.org2.example.com:
    build: ./docker-files/peer1.org2.example.com
    image: peer1.org2.example.com
    container_name: peer1.org2.example.com
    restart: always
    environment:
    - CORE_LOGGING_LEVEL=debug
    - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
    - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
    - CORE_PEER_ID=peer1.org2.example.com
    - CORE_PEER_ADDRESS=peer1.org2.example.com:7051
    - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric-network
    - CORE_PEER_LOCALMSPID=Org2MSP
    - CORE_PEER_MSPCONFIGPATH=/peer/peer1.org2.example.com/msp
    - CORE_PEER_TLS_ENABLED=true
    - CORE_PEER_TLS_CERT_FILE=/peer/tls/server.crt
    - CORE_PEER_TLS_KEY_FILE=/peer/tls/server.key
    - CORE_PEER_TLS_ROOTCERT_FILE=/peer/tls/ca.crt
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
    - 8151:7051
    - 8153:7053
    logging:
      options:
        max-size: 50m
    volumes:
    - /var/run:/host/var/run
    - peer1.org2.example.com:/var/hyperledger/production
    - ./chaincode:/chaincode
    depends_on:
    - orderer.example.com

  peer2.org2.example.com:
    build: ./docker-files/peer2.org2.example.com
    image: peer2.org2.example.com
    container_name: peer2.org2.example.com
    restart: always
    environment:
    - CORE_LOGGING_LEVEL=debug
    - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
    - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
    - CORE_PEER_ID=peer2.org2.example.com
    - CORE_PEER_ADDRESS=peer2.org2.example.com:7051
    - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric-network
    - CORE_PEER_LOCALMSPID=Org2MSP
    - CORE_PEER_MSPCONFIGPATH=/peer/peer2.org2.example.com/msp
    - CORE_PEER_TLS_ENABLED=true
    - CORE_PEER_TLS_CERT_FILE=/peer/tls/server.crt
    - CORE_PEER_TLS_KEY_FILE=/peer/tls/server.key
    - CORE_PEER_TLS_ROOTCERT_FILE=/peer/tls/ca.crt
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
    - 9151:7051
    - 9153:7053
    logging:
      options:
        max-size: 50m
    volumes:
    - /var/run:/host/var/run
    - peer2.org2.example.com:/var/hyperledger/production
    - ./chaincode:/chaincode
    depends_on:
    - orderer.example.com

  cli:
    build: ./docker-files/cli
    image: cli
    container_name: cli
    tty: true
    stdin_open: true
    environment:
    - GOPATH=/opt/gopath
    - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
    #- CORE_LOGGING_LEVEL=DEBUG
    - CORE_LOGGING_LEVEL=INFO
    - CORE_PEER_ID=cli
    - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
    - CORE_PEER_LOCALMSPID=Org1MSP
    - CORE_PEER_TLS_ENABLED=true
    - CORE_PEER_TLS_CERT_FILE=/cli/peers/peer0.org1.example.com/tls/server.crt
    - CORE_PEER_TLS_KEY_FILE=/cli/peers/peer0.org1.example.com/tls/server.key
    - CORE_PEER_TLS_ROOTCERT_FILE=/cli/peers/peer0.org1.example.com/tls/ca.crt
    - CORE_PEER_MSPCONFIGPATH=/cli/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
    - /var/run/:/host/var/run/
    - ./../cmd/chaincode/:/opt/gopath/src/chaincode
    depends_on:
    - orderer.example.com
    - peer0.org1.example.com
    - peer1.org1.example.com
    - peer0.org2.example.com
    - peer1.org2.example.com


